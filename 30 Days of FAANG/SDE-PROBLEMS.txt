Day1: (Arrays)
-1. Find the duplicate in an array of N integers. 
-2. Sort an array of 0’s 1’s 2’s without using extra space or sorting algo 
-3. Repeat and Missing Number 
-4. Merge two sorted Arrays without extra space 
-5. Kadane’s Algorithm 
-6. Merge Overlapping Subintervals 


Day2: (Arrays)
-1. Set Matrix Zeros 
-2. Pascal Triangle 
-6. Rotate Matrix  
-3. Next Permutation 


Day3: (Math)
-1. Excel Column Number 
-2. Find n^x in log N 
-3. Count trailing zeros in factorial of a number 
-4. Find GCD in Log N 
-5. Grid Unique Paths 
6. Go through Puzzles from GFG (Search on own) 


Day4: (Hashing)
-1. 2 Sum problem 
-2. 4 Sum problem 
-3. Longest Consecutive Sequence 
-4. Longest Subarray with 0 sum 
-5. Count number of subarrays with given XOR(this clears a lot of problems) 
-6. Longest substring without repeat 


Day5: (LinkedList) 
-1. Reverse a LinkedList 
-2. Find middle of LinkedList 
-3. Merge two sorted Linked List 
4. Remove N-th node from back of LinkedList 
5. Delete a given Node when a node is given. (0(1) solution) 
6. Add two numbers as LinkedList  


Day6: 
1. Find intersection point of Y LinkedList 
2. Check if a LinkedList is palindrome or not. 
3. Reverse a LinkedList in groups. 
4. Detect a cycle and removing loop(two different questions and same concept) 
5. Flattening of a LinkedList 
6. Rotate a LinkedList 
7. Clone a Linked List with random and next pointer. 
. 


Day7: (2-pointer) 
1. Merge two sorted LinkedLists 
2. Find the starting point of the loop. 
3. 3 sum 
4. Trapping rainwater 
5. Remove Duplicate from Sorted array 
6. Max continuous number of 1’s  


Day8: (Greedy)
1. N meeting in one room 
2. Activity Selection  
3. Greedy algorithm to find minimum number of coins
4. Fractional Knapsack Problem 
5. Minimum number of platforms required for a railway 
6. Job sequencing Problem 


Day9: (Backtracking)  (with Recursion also)
1. N queens Problem 
2. Sudoko 
3. M coloring Problem 
4. Rat in a Maze 
5. Print all Permutations of a string/array 
6. Word Break (print all ways)  


Day10: 
1. Combination sum-1 
2. Combination sum-2 
3. Palindrome Partioning 
4. Subset Sum-1 
5. Subset Sum-2 
6. K-th permutation Sequence 


Day11: (Divide and Conquer) 
1. 1/N-th root of an integer (use binary search) (square root, cube root, ..)
2. Matrix Median
3. Find the element that appears once in sorted array, and rest element appears twice (Binary search) 
4. Search element in a sorted and rotated array. 
5. K-th element of two sorted arrays 
6. Media of an array     


Day12: (Bits) (Optional, very rare topic in interviews, but if you have time left, someone might ask)
1. Check if a number if a power of 2 or not in O(1) 
2. Count total set bits 
3. Divide Integers without / operator 
4. Power Set (this is very important) 
5. Find MSB in o(1) 
6. Find square of a number without using multiplication or division operators.  


Day13: (Stack and Queue) 
   1. Implement Stack / Implement Queue
   2. BFS 
   3. Implement Stack using Queue
   4. Implement Queue using Stack 
   5. Check for balanced parentheses 
   6. Next Greater Element 


Day14: 
   1. Next Smaller Element 
   2. LRU cache (vvvv. imp) 
   3. Largest rectangle in histogram 
   4. Sliding Window maximum  (Sliding window technique)
   5. Implement Min Stack  
   6. Rotten Orange (Using BFS)  


Day15: (String) 
   1. Reverse Words in a String 
   2. Longest Palindrome in a string 
   3. Roman Number to Integer and vice versa
   4. Implement ATOI/STRSTR 
   5. Longest Common Prefix 
   6. Rabin Karp 

Day16: (String) 
      1. Prefix Function/Z-Function
      2. KMP algo 
      3. Minimum characters needed to be inserted in the beginning to make it palindromic. 
      4. Check for Anagrams 
      5. Count and Say 
      6. Compare version numbers 


Day17: (Binary Tree) 
      1. Inorder Traversal (with recursion and without recursion) 
      2. Preorder Traversal (with recursion and without recursion) 
      3. Postorder Traversal (with recursion and without recursion)  
      4. LeftView Of Binary Tree
      5. Bottom View of Binary Tree
      6. Top View of Binary Tree 


Day18: (Binary Tree) 
      1. Level order Traversal / Level order traversal in spiral form 
      2. Height of a Binary Tree 
      3. Diameter of Binary Tree 
      4. Check if Binary tree is height balanced or not 
      5. LCA in Binary Tree 
      6. Check if two trees are identical or not 


Day 19: (Binary Tree) 
      1. Maximum path sum 
      2. Construct Binary Tree from inorder and preorder 
      3. Construct Binary Tree from Inorder and Postorder 
      4. Symmetric Binary Tree 
      5. Flatten Binary Tree to LinkedList 
      6. Check if Binary Tree is mirror of itself or not   

 
Day 20: (Binary Search Tree) 
      1. Populate Next Right pointers of Tree 
      2. Search given Key in BST 
      3. Construct BST from given keys. 
      4. Check is a BT is BST or not  
      5. Find LCA of two nodes in BST 
      6. Find the inorder predecessor/successor of a given Key in BST. 
      7. print path given sum

Day21: (Binary Search Tree) 
      1. Floor and Ceil in a BST 
      2. Find K-th smallest and K-th largest element in BST (2 different Questions) 
      3. Find a pair with a given sum in BST 
      4. BST iterator 
      5. Size of the largest BST in a Binary Tree 
      6. Serialize and deserialize Binary Tree


Day22: (Mixed Questions) 
      1. Binary Tree to Double Linked List 
      2. Find median in a stream of running integers. 
      3. K-th largest element in a stream. 
      4. Distinct numbers in Window. 
      5. K-th largest element in an unsorted array. 
      6. Flood-fill Algorithm 


Day23: (Graph) 
      1. Clone a graph (Not that easy as it looks) 
      2. DFS - Depth-first Search
      3. BFS - Breadth-first search
      4. Detect A cycle in Undirected Graph/Directed Graph 
      5. Topo Sort 
      6. Number of islands (Do in Grid and Graph both) 
      7. Bipartite Check 


Day24: (Graph)
      1. SCC(using KosaRaju’s algo) 
      2. Djisktra’s Algorithm 
      3. Bellman Ford Algo 
      4. Floyd Warshall Algorithm  
      5. MST using Prim’s Algo 
      6. MST using Kruskal’s Algo  


Day25: (Dynamic Programming) 
      1. Max Product Subarray 
      2. Longest Increasing Subsequence
      3. Longest Common Subsequence 
      4. 0-1 Knapsack 
      5. Edit Distance
      6. Maximum sum increasing subsequence  
      7. Matrix Chain Multiplication 


Day26: (DP) 
      1. Maximum sum path in matrix, (count paths, and similar type do, also backtrack to find the maximum path) 
      2. Coin change 
      3. Subset Sum 
      4. Rod Cutting 
      5. Egg Dropping 
      6. Word Break 
      7. Palindrome Partitioning (MCM Variation) 

Day27: 
         1. Revise OS notes that you would have made during your sem 
         2. If not made notes, spend 2 or 3  days and make notes from Knowledge Gate. 


Day28: 
         1. Revise DBMS notes that you would have made during your semesters. 
         2. If not made notes, spend 2 or 3  days and make notes from Knowledge Gate. 


Day29: 
         1. Revise CN notes, that you would have made during your sem. 
         2. If not made notes, spend 2 or 3  days and make notes from Knowledge Gate. 




Day30: 
         1. Make a note of how will your represent your projects, and prepare all questions related to tech which you have used in your projects. Prepare a note which you can say for 3-10 minutes when he asks you that say something about the project. 

 find a shortest path, another one was a ad-HOC problem.
 What are the 10 algorithms one must know in order to solve most algorithm problems?

Tries
Dijkstra's Algorithm

Segment Tree (with lazy propagation)
Persistent Segment Tree

Z algorithm

Sparse Table(RMQ)

Heap / Priority Queue / Heapsort
Using a Heap or Priority Queue to keep track of max/min elements

Modular Multiplicative Inverse

nCr % M

Square root decomposition



which kind of data structure will you use in a particular scenario and why

Memoization (with Recursion)

You won’t be asked these directly. Each problem will be disguised as a situation. Your have to figure out how to apply one/more of these to solve the problem.


In data structures, a stack initially holds only one element: {2}. What will be the size of the stack after performing the following operations for ten times:

write the function that converts string into integers.

 Write a JSON parser. Just write a json parser that parses json formatted string into complex dictionaries or list or whatever.


maximum time of an algorithm  - big O

countUniqueNumbersFromDuplicates

increasing or decreasing order
prefix and postfix forms

Find all anagrams string
normal string matching

How to read/write from/to files
How to read input from the console
How to split strings
How to declare and use 2D arrays
In C/C++, how to handle null-terminated strings
Arrays: remove even integers, merge two sorted arrays, find second max value in array
Stacks/Queues: sort values in stack, implement two stacks using one array
Linked List: find length and middle, search in singly linked list, reverse linked list
Trees, Tries: total number of words in Trie, find all words stored in Trie
Heaps: find k smallest or largest elements in list
Graphs (BFS and DFS)
Save all leaf nodes of a Binary tree in a Doubly Linked List by using Right node as Next node and Left Node as Previous Node.
Given an array,find the maximum j – i such that arr[j] > arr[i]

Remove Alternate Duplicate characters from a char array you have to do it in Place.Like keeping only the odd occurrences of each character.
Example: Input: “you got beautiful eyes” 
Output: ”you gtbeaiful es” 
Allowed Time Complexity was O(n)  
and Space Complexity was O(1) 

In a file there are 1 million words . Find 10 most frequent words in that file.
Find all nodes at k-distance from a given node in a binary tree
Clone a linked list with next and random pointer
Serialise and Deserialise a linked list with next and random pointer.
Construct a binary tree from given inorder and preorder traversals.
Return a tree such that each internal node stores the sum of all its child nodes. Each leaf node stores zero.
How will you implement a linked list with 1 million nodes? How will you access 999999 th node? Give some optimal design strategy and implementation.
Reversal of Linked List in groups of K.
Given a positive integer N, count all possible distinct binary strings of length N such that there are no consecutive 1’s.
Check whether a given binary tree is balanced or not. Definition was no two leaves should have height differences of greater than one.
Remove duplicates from string in place in O(n).
Connect nodes on the same level in a binary tree.
Find the sum of data of all leaves of a binary tree on the same level and then multiply sums obtained of all levels.
Given a matrix of characters and a word.
you have to count the number of occurrences of that word in that matrix. you can move to any of the eight valid directions from current position.

You are given a string as input which represents a path. You have to normalize that path inplace(NO EXTRA SPACE).
e.g. input : "\a\b\c\..\..\file.txt" 
output: "\a\file.txt" 

Least common ancestor of two nodes in a binary tree
Given two sorted arrays (with repetitive elements) find the kth minimum number from both arrays.
Given the root to a binary tree, a value n and k.Find the sum of nodes at distance k from node with value n
Find an element in a rotated array
Given two linked lists both represent a number. Create a linked list that contains its sum.
Given a binary search tree , print the path which has the sum equal to k and has minimum hops. i.e if there are multiple paths with the sum equal to k then print the path with minimum number of nodes.

A MxN matrix containing integers (positive, negative and zeros). For every position containing 0, mark the corresponding row and column as 0.
Rotate MxN matrix by 90 degrees.

Find the nth number that contains the digit k or is divisible by k. (2 <= k <= 9)
Write a program to connect the next left node in a binary tree. Also the first node of each level should be pointing to the last node of the next level? (Without using Queue)
Convert a binary tree to its sum tree(each node is the sum of its children)
Given a directed graph. Construct another graph from a given graph such that if the path exists from vertices A to vertices B and from B to C, then the path from A to C and from C to A also should exist.
Implement a hashmap on your own. Write a good hashing function for string.
Given an array, arrange the elements such that the number formed by concatenating the elements is highest.
E.g.: input = [9, 93, 24, 6], the output should be: [9,93,6,24]. This is because if you concatenate all the numbers, 993624 is the highest number that can be formed.
Given a string, find the longest substring which is palindrome.
Given that integers are read from a data stream. Find the median of elements read so far in an efficient way. For simplicity assume there are no duplicates.
Write an efficient program for printing k largest elements in an array. Elements in the array can be in any order.
Given an unsorted array and a number K. Find 2 numbers such that the sum is K.
Given a n-ary tree. zigzag level order traversal.
Given string s and string t find whether all permutation of t is present as substring in s.
Design a stack which holds an integer value such that getMinimum() function should return the minimum element in the stack. Implement popMin() function which would pop the minimum element from the original stack.

Given a set of intervals like 5-10, 15-20, 25-40, 30-45, 50-100. Find the ith smallest number in these intervals. Assume there are no duplicate numbers.
e.g:  1st smallest number = 5	   
6th smallest number = 10	   
7th smallest number = 15 and so on.  
Given an array which is first strictly increasing and then strictly decreasing. Find an element in this array.
Given a string example : shoppingwithflipkartiseasy, Now we are given this string and a dictionary containing valid words , now we need to break the sentence into words separated by space. Output : shopping with flipkart is easy

Given a series 2,3,4,5,6,8,9,10,……, here in this series all the numbers are present which have factors only and only either 2,3 or 5. Need to write a node to generate the nth number for the series . With best approach and complexity

Given a tree with edge weights, find any path in the tree with maximum sum of edges.
Merge k sorted arrays.
Given a maze, a start point and end point find the shortest path to reach the end point from the starting point.
Given a sentence and a set of characters. Find the minimum window within which the set of characters can be found in the sentence in any order.
You are given a string of 0’s and 1’s you have to find the number of substrings in the string which starts and ends with a 1.
eg : input : 0010110010 
output : 6 

# Catalan numbers


https://www.geeksforgeeks.org/amazon-sde-1-interview-experience-wow-2020/
https://www.geeksforgeeks.org/minimum-time-to-burn-a-tree-starting-from-a-leaf-node/

https://practice.geeksforgeeks.org/contest/interview-series-google/problems/

https://practice.geeksforgeeks.org/problems/shortest-path-between-cities/1#
https://practice.geeksforgeeks.org/problems/963b3db8c7ac09d564c9d354c07af13c624ba94d/1

https://practice.geeksforgeeks.org/problems/neemans-shoes/1/#